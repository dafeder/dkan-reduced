<?php

/**
 * @file
 * Data API via services.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function dkan_data_api_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_services_resources.
 */
function dkan_data_api_services_resources() {
  return array(
    'dkan_datastore_search' => array(
      'index' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
        'description' => 'Data API for DKAN datastores',
        'callback' => '_dkan_data_api_datastore_index',
        'args' => array(
          array(
            'name' => 'resource_id',
            'optional' => FALSE,
            'type' => 'array',
            'description' => 'id or alias of the resource to be searched against.',
            'default value' => 0,
            'source' => array('param' => 'resource_id'),
          ),
          array(
            'name' => 'filters',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'matching conditions to select.',
            'default value' => 0,
            'source' => array('param' => 'filters'),
          ),
          array(
            'name' => 'query',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'matching conditions to select.',
            'default value' => 0,
            'source' => array('param' => 'query'),
          ),
          array(
            'name' => 'language',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'language of the full text query (default: en)',
            'default value' => 'en',
            'source' => array('param' => 'language'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'offset this number of rows',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'maximum number of rows to return (default: 100).',
            'default value' => variable_get('dkan_data_api_index_limit', 100),
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'fields',
            'optional' => TRUE,
            'type' => array(),
            'description' => 'fields to return as a list or comma separated string (default: all fields in original order).',
            'default value' => '*',
            'source' => array('param' => 'fields'),
          ),
          array(
            'name' => 'sort',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'comma separated field names with ordering e.g.: â€œfieldname1, fieldname2 desc.',
            'default value' => '',
            'source' => array('param' => 'sort'),
          ),
          array(
            'name' => 'join',
            'optional' => TRUE,
            'type' => 'array',
            'description' => 'array of values to join on if including multiple datasets.',
            'default value' => '',
            'source' => array('param' => 'join'),
          ),
        ),
        'access callback' => '_dkan_data_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
    ),
  );
}

/**
 * CRUD retrieve callback.
 */
function _dkan_data_api_datastore_index($resource_ids, $filters, $query, $language, $offset, $limit, $fields, $sort, $join) {
  // Don't allow query search and 
  // TODO: Make resource_id optional and format error repsonse.

  if (count($resource_ids) < 2) {
    $resource_id = array_shift(array_values($resource_ids));
    $table = 'dkan_datastore_' . $resource_id;
    $data_select = dkan_data_api_build_index_query($resource_id, $offset, $limit, $fields, $sort);
    dkan_data_api_add_index_conditions($data_select, $filters);
//    $data_select->condition('t.country', services_str_getcsv('AR,CA'), 'IN');
    //$data_select->addJoin('INNER', 'dkan_datastore_13', 'c', 't.country = c.country');
    //$data_select->addField('c', 'squarekm');
    //$data_select->distinct(TRUE);
    $results = services_resource_execute_index_query($data_select);
    return dkan_data_api_resource_build_index_list($results, $table, $fields);
  }
  else {
    $i = 0;
    foreach ($resource_ids as $alias => $resource_id) {
      if (!is_numeric($resource_id)) { //TODO: Check resource exits.
        // TODO: Error.
      }
      if ($i == 0) {
        $fields = isset($fields[$alias]) ? $fields[$alias] : $fields;
        $sort = isset($sort[$alias]) ? $sort[$alias] : $sort;
        $filters = isset($filters[$alias]) ? $filters[$alias] : $filters;
        $data_select = dkan_data_api_build_index_query($resource_id, $offset, $limit, $fields, $sort, $alias = 't');
        dkan_data_api_add_index_conditions($data_select, $filters, $alias);
      }
      else {
        $fields = isset($fields[$alias]) ? $fields[$alias] : $fields;
        $sort = isset($sort[$alias]) ? $sort[$alias] : $sort;
        $filters = isset($filters[$alias]) ? $filters[$alias] : $filters;
        dkan_data_api_build_additional_index_query($data_select, $resource_id, $offset, $limit, $fields, $sort, $alias, $join);
      }
      //$data_select = dkan_data_api_build_index_query($resource_id, $offset, $limit, $fields, $sort, $alias);
      //dkan_data_api_add_index_conditions($data_select, $filters, $alias);

      $i++;
      // Join
    }
    $results = services_resource_execute_index_query($data_select);
    return dkan_data_api_resource_build_index_list($results, $table);
   // $results = services_resource_execute_index_query($data_select);
   // return services_resource_build_index_list($results, 'read/' . $resource_id, array());

    $data_select->addJoin('INNER', 'dkan_datastore_13', 'c', 't.country = c.country');
    $data_select->addField('c', 'squarekm');
    $data_select->condition('c.country', 'AR', '=');
    $data_select->distinct(TRUE);
  }

  return $output;
}

function dkan_data_api_add_index_conditions(&$data_select, $filters, $alias = 't') {
  if (is_array($filters)) {
    foreach($filters as $num => $filter) {
      if (is_array($filter)) {
        foreach($filter as $key => $value) {
          $data_select->condition($num . '.' . $key, $filter, 'IN');
        }
      }
      else {
        $data_select->condition($alias . '.' . $num, services_str_getcsv($filter), 'IN');
      }
    }
  }
}
function dkan_data_api_build_additional_index_query(&$data_select, $resource_id, $offset, $limit, $fields, $sort, $alias, $join) {

  $data_select->addJoin('INNER', 'dkan_datastore_' . $resource_id, $alias, 't.country = ' . $alias . '.country');
  if ($fields == '*') {
    //$data_select->addField($alias, $fields);
  }
  else {
    //$data_select->addField($alias, explode(',', $fields));
  }
//    $data_select->condition('t.country', services_str_getcsv('AR,CA'), 'IN');
    //$data_select->addJoin('INNER', 'dkan_datastore_13', 'c', 't.country = c.country');
    //$data_select->addField($alias, '*');
    //$data_select->distinct(TRUE);
  // 1) Filters
//    $data_select->condition('t.country', services_str_getcsv('AR,CA'), 'IN');
  // 1a) Join
  // 2) Fields
  // 3) Sort
  //TODO: Is this need an add, probably, not sure how to do with dbng.
}
function dkan_data_api_build_index_query($resource_id, $offset, $limit, $fields, $sort, $alias = 't') {
  $table = 'dkan_datastore_' . $resource_id;
  if (db_table_exists($table)) {
    $data_select = db_select($table, $alias);
    if (isset($sort) && is_array($sort)) {
      foreach($sort as $field => $type) {
        $data_select->orderBy($field, $type);
      }
    }
    else {
      $data_select->orderBy('timestamp', 'DESC');
    }

    dkan_data_api_resource_build_index_query($data_select, $offset, $fields, $limit, $alias, $table);
    return $data_select;
  }
}

/**
 * same as services version but not adding conditions.
 */
function dkan_data_api_resource_build_index_query(&$query, $page, $fields, $page_size, $alias, $table) {
  $default_limit = variable_get("{$table}_index_page_size", 20);
  if (!user_access('perform unlimited index queries') && $page_size > $default_limit) {
    $page_size = $default_limit;
  }
  $query->range($page * $page_size, $page_size);
  if ($fields == '*') {
    $query->fields('t');
  }
  else {
    $query->fields('t', explode(',', $fields));
  }
}

/**
 * Access callback.
 */
function _dkan_data_api_datastore_access($op) {
  return TRUE;
}

function dkan_data_api_test() {
  // Require N ---
  // resources_ids
  // filters
  // query
  // fields
  // sort
  // Do not N ---
  // language
  // limit
  // offest
  $output = array();
  $output[] = array('Resource ID' => $resource_ids);
  $output[] = array('Filters' => $filters);
  $output[] = array('query' => $query);
  $output[] = array('language' => $language);
  $output[] = array('limit' => $limit);
  $output[] = array('offset' => $offset);
  $output[] = array('fields' => $fields);
  $output[] = array('sort' => $sort);
  $output[] = array('join' => $join);
}

function dkan_data_api_resource_build_index_list($results, $table, $fields) {
  // Put together array of matching items to return.
  $items = array();
  $endpoint_name = services_get_server_info('endpoint');
  $endpoint = services_endpoint_load($endpoint_name);
  GLOBAL $base_url;
  $path = $base_url . '/' . $endpoint->path . '/read/' . $table;
  foreach ($results as $result) {
    $result->uri = $path;
    $items[] = $result;
  }

  $help = array('help' => dkan_data_api_resource_help());
  $count = array('count' => count($items));
  $success = count($items) ? array('success' => true) : array('success' => false);
  $schema = drupal_get_schema($table);
  if ($fields == '*') {
    $fields = array('fields' => $schema['fields']);
  }
  else {
    $used_fields = explode(',', $fields);
    foreach ($used_fields as $key => $field) {
      $output_fields[$field] = $schema['fields'][$field];
    }
    $fields = array('fields' => $output_fields);
  }

  return $help + $success + $count + $fields + array('records' => $items);

  return $items;
}

function dkan_data_api_resource_help() {
  return t('Search a datastore table. :param resource_id: id or alias of the data that is going to be selected.');
}
