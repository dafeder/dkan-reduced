<?php

/**
 * @file
 * Custom elements for datasets.
 */

/**
 * Implements hook_page_alter();
 */
function dkan_dataset_page_alter(&$page) {
  // Adding page title to breadcrumb.
  // Context module does this in hook_page_alter() so we need to as well if
  // we want to add this.
  $breadcrumbs = drupal_get_breadcrumb();
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = menu_get_object();
    if ($node) {
      if ($node->type == 'resource') {
        // Resource title gets trimmed.
        $breadcrumbs[] = dkan_dataset_text_trim($node->title);
      }
      else {
        $breadcrumbs[] = $node->title;
      }
    }
  }
  else {
    if (arg(1) != 'add') {
      $breadcrumbs[] = drupal_get_title();
    }
  }

  drupal_set_breadcrumb($breadcrumbs);
}
/**
 * Implements hook_node_view().
 */
function dkan_dataset_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'dataset') {
    $breadcrumbs = drupal_get_breadcrumb();
    // Add the title without link
    $breadcrumbs[] = $node->title;

    // Set the new breadcrumb.
    drupal_set_breadcrumb($breadcrumbs);

    $node->content['resources'] = array(
      '#type' => 'item',
      '#theme' => 'dkan_dataset_resource_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Data and Resources'),
      '#label_display' => 'above',
      '#prefix' => '<div id="data-and-resources">',
      '#suffix' => '</div>',
    );
  }
  elseif ($view_mode = 'teaser' && ($node->type == 'dataset' || $node->type == 'resource')) {
    if (isset($node->content['links']['node']['#links']['node-readmore'])) {
      unset($node->content['links']['node']['#links']['node-readmore']);
    }
    $node->content['body']['#weight'] = '-10';
    $node->content['resources'] = array(
      '#type' => 'item',
      '#theme' => 'dkan_dataset_resource_teaser_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => '',
      '#label_display' => 'above',
      '#prefix' => '<div class="data-and-resources">',
      '#suffix' => '</div>',
      '#weight' => '20',
    );
  }
}

/**
 * Implements hook_theme().
 */
function dkan_dataset_theme() {
  $theme = array(
    'dkan_dataset_resource_view' => array(
      'variables' => array('node' => NULL),
    ),
    'dkan_dataset_resource_teaser_view' => array(
      'variables' => array('node' => NULL),
    ),
  );
  return $theme;
}

/**
 * Output the Webform into the node content.
 *
 * @param $node
 *   The webform node object.
 * @param $enabled
 *   If the form allowed to be completed by the current user.
 */
function theme_dkan_dataset_resource_view($vars) {
  $nodes = dkan_dataset_get_resource_nodes($vars['node']->nid);
  $links = array();
  if (isset($nodes)) {
    foreach ($nodes as $node) {
      if (isset($node->body) && $node->body && isset($node->body[$node->language])) {
        $desc = '<p class="description">' . dkan_dataset_text_trim($node->body[$node->language][0]['safe_value'], 80) . '</p>';
      }
      else {
        $desc = '<p class="description"></p>';
      }
      if (isset($node->field_format) && $node->field_format) {
        $term = taxonomy_term_load($node->field_format[$node->language][0]['tid']);
        $term = '<span class="format-label" property="dc:format" data-format="' . $term->name  . '">' . $term->name  .'</span>';
      }
      else {
        $term = '<span class="format-label" property="dc:format" data-format="data">Data</span>';
      }
      $explore_link = l('Explore Data', 'node/' . $node->nid, array('attributes' => array('class' => array('btn', 'btn-primary'))));
      $links[] = l($node->title . $term , 'node/' . $node->nid, array('html' => TRUE, 'attributes' => array('class' => array('heading'), 'title' => $node->title))) . $desc . $explore_link;
    }

    $output = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('resource-list'))));
  }
  return $output;
}

/**
 * Output the Webform into the node content.
 *
 * @param $node
 *   The webform node object.
 * @param $enabled
 *   If the form allowed to be completed by the current user.
 */
function theme_dkan_dataset_resource_teaser_view($vars) {
  if ($vars['node']->type == 'dataset') {
    $nodes = dkan_dataset_get_resource_nodes($vars['node']->nid);
  }
  else {
    $nodes = array($vars['node']);
  }
  $links = array();
  if (isset($nodes)) {
    foreach ($nodes as $node) {
      $term = '';
      if (isset($node->field_format) && $node->field_format) {
        $term = taxonomy_term_load($node->field_format[$node->language][0]['tid']);
        $links[] = l($term->name , 'node/' . $node->nid, array('attributes' => array('class' => array('label'), 'title' => $node->title, 'data-format' => $term->name)));
      }
    }

    $output = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('resource-list'))));
  }
  return $output;
}

/**
 * Implements hook_field_extra_fields().
 */
function dkan_dataset_field_extra_fields() {
  $extra['node']['dataset'] = array(
    'form' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
    )
  );

  return $extra;
}


/**
 * Implements hook_block_info().
 */
function dkan_dataset_block_info() {
  $blocks['dkan_dataset_license'] = array(
    'info' => t('License'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['dkan_dataset_social'] = array(
    'info' => t('Social'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['dkan_dataset_resource_additional'] = array(
    'info' => t('Additional Information'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['dkan_dataset_search_bar'] = array(
    'info' => t('Search'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dkan_dataset_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'dkan_dataset_license':
      $block['subject'] = t('License');
      $block['content'] = dkan_dataset_license_block();
      break;

    case 'dkan_dataset_social':
      $block['subject'] = t('Social');
      $block['content'] = dkan_dataset_social_block();
      break;

    case 'dkan_dataset_resource_additional':
      $block['subject'] = t('Additional Information');
      $block['content'] = dkan_dataset_resource_additional_block();
      break;

    case 'dkan_dataset_search_bar':
      $block['subject'] = '';
      $block['content'] = dkan_dataset_search_bar();
      break;
  }
  return $block;
}

function dkan_dataset_resource_additional_block($nid  = '') {
  $node = $nid ? node_load($nid) : menu_get_object();
  $dataset_node = entity_metadata_wrapper('node', $node)->field_dataset_ref->value();
  $additional = isset($dataset_node->field_additional_info[$dataset_node->language]) ? $dataset_node->field_additional_info[$dataset_node->language] : array(array());
  $file_info = array();
  if (isset($node->field_upload[$node->language]) && $file = $node->field_upload[$node->language][0]) {
    $file_info[] = array(t('mimetype'), $file['filemime']);
    $file_info[] = array(t('filesize'), $file['filesize']);
    $file_info[] = array(t('resource type'), 'file upload');
    $file_info[] = array(t('timestamp'), date('M d, Y', $file['timestamp']));
  }
  $rows = array_merge($additional, $file_info);

  return $rows[0] ? theme('table', array('rows' => $rows, 'header' => array(t('Field'), t('Value')))) : '';
}

/**
 * Add license info to block for dataset node.
 * This is the kind of cool thing you can do int he UI with panels but I don't
 * wan't the overhead.
 */
function dkan_dataset_license_block() {
  $node = menu_get_object();
  if ($node->type != 'dataset') {
    return '';
  }
  else {
    if (isset($node->field_license) && $node->field_license) {
      $key = $node->field_license[$node->language][0];
      $field = field_info_instance('node', 'field_license', 'dataset');
      $raw_options = $field['widget']['settings']['available_options'];
      foreach (explode("\n", $raw_options) as $option) {
        $option = explode("|", $option);
        $options[$option[0]] = $option[1];
      }
      $key = $key['value'];
      $label = $options[$key];

      $output = l($label, 'http://opendefinition.org/licenses/' . $key) . '<br/>';
      if ($key != 'other-closed') {
        $output .= l('<img class="open-data" src="http://assets.okfn.org/images/ok_buttons/od_80x15_blue.png" alt="[Open Data]">', 'http://opendefinition.org/licenses/' . $key, array('html' => TRUE));
      }

      return $output;
    }
    else {
      return t('License not specified');
    }
  }
}

/**
 * Adds social links.
 */
function dkan_dataset_social_block() {
  $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
  $link = url($path, array('absolute' => TRUE));
  return '
    <ul class="nav nav-simple">
      <li class="nav-item"><a href="https://plus.google.com/share?url=' . $link  .  '" target="_blank"><i class="ckan-icon ckan-icon-gplus"></i> Google+</a></li>
      <li class="nav-item"><a href="https://twitter.com/share?url=' . $link  . '" target="_blank"><i class="ckan-icon ckan-icon-twitter"></i> Twitter</a></li>
      <li class="nav-item"><a href="https://www.facebook.com/sharer.php?u=' . $link  . '" target="_blank"><i class="ckan-icon ckan-icon-fb"></i> Facebook</a></li>
    </ul>';
}

/**
 * Small helper to get Resource nodes linked to a Dataset.
 */
function dkan_dataset_get_resource_nodes($nid) {
  $nodes = array();
  $nids = array();
  $query = new EntityFieldQuery;

  $results = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_dataset_ref', 'target_id', $nid, '=')
    ->execute();
  if ($results) {
    foreach ($results as $node) {
      foreach ($node as $nid => $obj) {
        $nids[] = $nid;
      }
    }
  }
  $nodes = isset($nids) ? node_load_multiple($nids) : array();
  return $nodes;
}

/**
 * Small helper to get title from nid.
 */
function dkan_dataset_get_title($nid) {
  $result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid,'=')
    ->execute()
    ->fetchAssoc();
  if (isset($result['title'])) {
    return $result['title'];
  }
  else {
    return FALSE;
  }
}

function dkan_dataset_text_trim($title, $number = 25) {
  $alter = array(
    'max_length' => $number,
    'ellipsis' => TRUE,
    'word_boundary' => TRUE,
    'trim' => TRUE,
  );
  return views_trim_text($alter, $title);
}
/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dkan_dataset_menu_breadcrumb_alter(&$active_trail, $item) {
  // Trim the length of dataset title if viewing resource node.
  if (module_exists('context')) {
    $contexts = context_active_contexts();
  }
  if (isset($contexts['resource']) || isset($contexts['resource-edit'])) {
    $nid = isset($item['map'][1]->field_dataset_ref['und'][0]['target_id']) ? $item['map'][1]->field_dataset_ref['und'][0]['target_id'] : 1;
    $active_trail[2] = menu_get_item('node/' . $nid);
    $active_trail[2]['title'] = dkan_dataset_text_trim($active_trail[2]['title']);
    $active_trail[1] = menu_get_item('dataset');
    $active_trail[1]['title'] = t('Dataset');
  }
  if (isset($contexts['resource-create'])) {
    $active_trail[1] = menu_get_item('dataset');
    $active_trail[1]['title'] = t('Dataset');
    if ($query = drupal_get_query_parameters()) {
      if (isset($query['dataset'])) {
        // Dataset node.
        $active_trail[2] = menu_get_item('node/' . $query['dataset']);
        // Add Resource.
        $active_trail[3] = menu_get_item('node/add/resource');
        $active_trail[3]['title'] = t('Add Resource');
        $active_trail[3]['href'] = 'node/add/resource';
        $active_trail[3]['localized_options']['query'] = array('dataset' => $query['dataset']);
        // Add an extra since last one is removed.
        $active_trail[4] = $active_trail[3];
      }
    }
  }
}

/**
 * Creates search bar.
 */
function dkan_dataset_search_bar() {
  if (module_exists('dkan_search_sql')) {
    $view = views_get_view('dataset');
    $view->set_display('page');
    $view->init_handlers();
    $exposed_form = $view->display_handler->get_plugin('exposed_form');
    $exposed_form->view->filter['search_api_views_fulltext']->options['expose']['description'] = t('eg. Gold Prices');
    $exposed_form->view->filter['search_api_views_fulltext']->options['expose']['label'] = '';
    drupal_add_js(drupal_get_path('module', 'dkan_forms') . '/dkan_forms.js');
    return $exposed_form->render_exposed_form(true);
  }
}
