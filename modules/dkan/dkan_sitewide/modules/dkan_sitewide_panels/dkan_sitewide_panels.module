<?php
/**
 * @file
 * Code for the DKAN panels feature.
 */

include_once 'dkan_sitewide_panels.features.inc';

/**
 * Implements hook_preprocess_panels_style_collapsible().
 *
 * Ensures facets are expanded if in use.
 */
function dkan_sitewide_panels_preprocess_panels_style_collapsible(&$variables) {
  // Find out if the pane matches a facet in the query string; un-collapse if so
  $pane = $variables['pane'];
  if (substr($pane->type, 0, 8)) {
    if (isset($_GET['f']) && is_array($_GET['f'])) {
      foreach ($_GET['f'] as $param) {
        // We match the first part of the param to a mapped facet name
        $param_parts = explode(':', $param, 2);
        $param_name = $param_parts[0];
        // The pane subtype will be something like "facetapi-wsVI1ENUXwf4Rz08n9fg2WvfQ0Gs5h2a"
        $facet_hash = substr($pane->subtype, 9);
        $facet_delta_map = facetapi_get_delta_map();
        if (in_array($facet_hash, array_keys($facet_delta_map))) {
          $mapping_parts = explode(':', $facet_delta_map[$facet_hash]);
          $facet_name = $mapping_parts[2];
          if ($facet_name == $param_name) {
            $variables['collapsed'] = 0;
          }
        }
      }
    }
  }
}

/**
 * Process variables for node--search-result.tpl.php.
 *
 * Search results formatting for DKAN search page
 *
 * See https://github.com/NuCivic/nuboot_radix/blob/7.x-1.x/templates/node/node--search-result.tpl.php
 * for an example template implementation.
 */
function dkan_sitewide_panels_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'search_result') {
    $variables['result_icon'] = array(
      '#theme' => 'dkan_icons_search_icons',
      '#type' => $variables['type'],
      '#class' => array('search-result-icon'),
    );


    $wrapper = entity_metadata_wrapper('node', $variables['nid']);
    $groups = og_get_entity_groups('node', $wrapper->value());
    $variables['group_list'] = NULL;
    $variables['body'] = $wrapper->body->value->value();
    $variables['node_url'] = drupal_lookup_path('alias', "node/" . $wrapper->getIdentifier());

    if(!empty($groups['node'])) {
      $groups = array_map(function($gid){
        $g_wrapper = entity_metadata_wrapper('node', $gid);
        return $g_wrapper->label();
      }, array_values($groups['node']));
      $group_list = implode(',', $groups);
      $variables['group_list'] = $group_list;
    }
  }
}